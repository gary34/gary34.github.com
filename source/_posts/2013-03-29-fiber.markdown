---
layout: post
title: "Fiber"
date: 2013-03-29 15:53
comments: true
categories:
---
纤程Fiber: 一个类似线程的协作任务，和线程不同的是纤程不能通过vm来调度，只能通过用户自己来调度。切换的代价很小。
{% include_code  [lang:ruby] Fiber.rb %}

从上面代码可以看出线程可以保存自己的上下文，并且可以像线程一样脱离当前线程独立存在.
当纤程里面的代码顺序执行执行完成之后纤程就终止了。
代码中fib每被调用一次(resume)就执行一次loop,因为是死循环所以纤程fib可以一直被调用。

协程Coroutines:
Ruby中新的纤程是半协程[（semi- coroutines）](http://en.wikipedia.org/wiki/Coroutine)。
协程只是一个概念，其定义是“能挂起和唤醒的计算机程序子运行时”的计算机程序子运行时
半协程是不对称（asymmetric）协程，在它们对控制权传递的选择上收到限制。不对称协程只能将控制权传递回它们的调用者，而对于协程来说，只要它们有相应的句柄，它们就可以自由地将控制传递给其它的任何一个纤程。
wikipedia上说的很多都看不懂，我只看了协程在java和ruby中的实现，在java中主要和jvm有关系，一般的jvm都是用thread来实现的。Ruby则是纤程（那线程算不算...）。Lua就叫coroutine,只是底层实现各有不同。


Links:

[Ruby 1.9加入纤程实现轻量级并发](http://www.infoq.com/cn/news/2007/09/ruby-1-9-fibers)

[Lua coroutine 不一样的多线程编程思路](http://timyang.net/lua/lua-coroutine/)
